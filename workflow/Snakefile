# Read configuration file
configfile: "config/config.yml"

# Final rule that brings it all together
rule all:
    input:
        "results/result_output_filtered.tsv"

# Rule for removing intermediate output
rule clean:
    shell:
        "python workflow/scripts/clean.py"

# Rule to load criteria
rule load_criteria:
    input:
        bold_data=config["BOLD_TSV"]
    output:
        "results/bold_with_criteria.tsv"
    log: "logs/load_criteria.log"
    params:
        criteria=config["CRITERIA"]
    shell:
        "python workflow/scripts/load_criteria.py --bold_data_tsv {input.bold_data} --criteria '{params.criteria}' --output_tsv {output}"

# Rules for accessing each criterion
rule access_species_id:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_SPECIES_ID.tsv"
    log: "logs/access_species_id.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion SPECIES_ID --output_tsv {output}"

rule access_type_specimen:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_TYPE_SPECIMEN.tsv"
    log: "logs/access_type_specimen.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion TYPE_SPECIMEN --output_tsv {output}"

rule access_seq_quality:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_SEQ_QUALITY.tsv"
    log: "logs/access_seq_quality.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion SEQ_QUALITY --output_tsv {output}"

rule access_public_voucher:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_PUBLIC_VOUCHER.tsv"
    log: "logs/access_public_voucher.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion PUBLIC_VOUCHER --output_tsv {output}"

rule access_has_image:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_HAS_IMAGE.tsv",
        "results/image_urls.tsv" if config["IMAGE_URL"] else "results/accessed_HAS_IMAGE.tsv"
    params:
        image_url_flag="--image_url" if config["IMAGE_URL"] else ""
    log: "logs/access_has_image.log"
    resources:
        mem_gb= 50
    shell:
        """
        python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} \
        --criterion HAS_IMAGE --output_tsv {output[0]} {params.image_url_flag}
        """

rule access_identifier:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_IDENTIFIER.tsv"
    log: "logs/access_identifier.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion IDENTIFIER --output_tsv {output}"

rule access_id_method:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_ID_METHOD.tsv"
    log: "logs/access_id_method.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion ID_METHOD --output_tsv {output}"

rule access_collectors:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_COLLECTORS.tsv"
    log: "logs/access_collectors.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion COLLECTORS --output_tsv {output}"

rule access_collection_date:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_COLLECTION_DATE.tsv"
    log: "logs/access_collection_date.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion COLLECTION_DATE --output_tsv {output}"

rule access_country:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_COUNTRY.tsv"
    log: "logs/access_country.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion COUNTRY --output_tsv {output}"

rule access_site:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_SITE.tsv"
    log: "logs/access_site.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion SITE --output_tsv {output}"

rule access_coord:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_COORD.tsv"
    log: "logs/access_coord.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion COORD --output_tsv {output}"

rule access_institution:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_INSTITUTION.tsv"
    log: "logs/access_institution.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion INSTITUTION --output_tsv {output}"

rule access_museum_id:
    input:
        bold_data="results/bold_with_criteria.tsv"
    output:
        "results/accessed_MUSEUM_ID.tsv"
    log: "logs/access_museum_id.log"
    resources:
        mem_gb= 20
    shell:
        "python workflow/scripts/access_criteria.py --bold_data_tsv {input.bold_data} --criterion MUSEUM_ID --output_tsv {output}"

# Rule for concatenating TSVs
rule concatenate:
    input:
        expand("results/accessed_{criterion}.tsv", criterion=config["CRITERIA"].split())
    output:
        "results/concatenated.tsv"
    log: "logs/concatenate.log"
    params:
        criteria=config["CRITERIA"]
    shell:
        "python workflow/scripts/concat.py --criteria '{params.criteria}' --output_path {output}"

# Rule for outputting filtered data in BCDM
rule ranking_score:
    input:
        db_file="results/concatenated.tsv",
        criteria_file="results/bold_with_criteria.tsv"
    output:
        "results/result_output.tsv"
    log: "logs/output_filtered_data.log"
    resources:
        mem_gb= 250000
    shell:
        "python workflow/scripts/ranking_score.py --db_file {input.db_file} --criteria_file {input.criteria_file} --output_path {output}"

# Rule for filtering the final output
rule filter_output:
    input:
        "results/result_output.tsv"
    output:
        "results/result_output_filtered.tsv"
    log: "logs/filter_output.log"
    shell:
        "python workflow/scripts/filter_tsv.py {input} {output}"